Index: Main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime, openpyxl, os, sv_ttk\r\nfrom tkinter import *\r\nfrom tkinter import messagebox\r\nfrom tkinter import ttk\r\n\r\n# import pandas as pd\r\n# import matplotlib.pyplot as plt\r\n# from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\n\r\nUsers = {'Adam': ['Adam', 'Adam'],\r\n         'Kelly': ['Kelly', 'K3lly'],\r\n         'DaisyS89': ['P34Ches', 'Daisy'],\r\n         'DaveN23': ['d4v3', 'Dave'],\r\n         'Boss': ['ssoB', 'Boss']}\r\n\r\nCarBrands = ['Abarth', 'Alfa Romeo', 'Alpine', 'Aston Martin', 'Audi', 'BMW', 'Bentley', 'Bugatti', 'Cadillac',\r\n             'Chevrolet', 'Chrysler', 'Citroën', 'Cupra', 'DS', 'Dacia', 'Ferrari', 'Fiat', 'Ford', 'Genesis',\r\n             'Honda', 'Hyundai', 'Infiniti', 'Isuzu', 'Iveco', 'Jaguar', 'Jeep', 'Kia', 'Lada', 'Lamborghini',\r\n             'Land Rover', 'Lexus', 'Lotus', 'MG', 'Maserati', 'Mazda', 'McLaren', 'Mercedes-Benz', 'Mini',\r\n             'Mitsubishi', 'Nissan', 'Peugeot', 'Polestar', 'Porsche', 'Renault', 'Rolls-Royce', 'SAAB', 'Seat',\r\n             'Smart', 'Ssangyong', 'Subaru', 'Suzuki', 'Tesla', 'Toyota', 'Vauxhall', 'Volkswagen', 'Volvo', 'Škoda']\r\n\r\nloggedInUser = ''\r\n\r\n\r\ndef loginSuccess(user):\r\n    \"\"\"\r\nThe function that runs upon login success.\r\nloggedInUser is global as it is used elsewhere.\r\nthis is very janky.\r\n    :param user:\r\n    \"\"\"\r\n    global loggedInUser\r\n    root.deiconify()\r\n    root.focus()\r\n    loginW.withdraw()\r\n    loggedInUser = Users.get(user)[1]\r\n\r\n\r\ndef login(username, password):\r\n    \"\"\"\r\nTakes the inputted username and password in the login window and checks them against the Users dictionary.\r\nmessageboxes are used to convey login failure.\r\n    :param username:\r\n    :param password:\r\n    \"\"\"\r\n    if Users.get(username.get()) is not None:\r\n        if Users.get(username.get())[0] == password.get():\r\n            loginSuccess(username.get())\r\n        else:\r\n            messagebox.showerror(title='Login Failure', message='Incorrect Credentials')\r\n    else:\r\n        messagebox.showerror(title='Login Failure', message='Incorrect Credentials')\r\n\r\n\r\ndef CurrentDate(day, month, year):\r\n    \"\"\"\r\nSets the strings in the spinboxes to the current date with datetime.\r\nQuite self-explanatory, but very useful.\r\n    :param day:\r\n    :param month:\r\n    :param year:\r\n    \"\"\"\r\n    today = datetime.date.today()\r\n    day.set(today.day)\r\n    month.set(today.month)\r\n    year.set(today.year)\r\n\r\n\r\ndef subwindowclose(window):\r\n    \"\"\"\r\nUsed to replace the default window close protocol.\r\n    :param window:\r\n    \"\"\"\r\n    window.destroy()\r\n    root.deiconify()\r\n\r\n\r\nwindowBG = '#1c1c1c'\r\n# This makes a folder in the local %appdata% folder to put the Excel file in\r\ncarsFilePath = f'{os.getenv(\"APPDATA\")}/SDMS/Cars.xlsx'\r\ndirFilePath = f'{os.getenv(\"APPDATA\")}/SDMS/'\r\n# If the folder doesn't exist, make it\r\nif not os.path.exists(carsFilePath):\r\n    os.makedirs(dirFilePath)\r\n    carsData = openpyxl.Workbook()\r\n    dataSheet = carsData.active\r\n    header = ['Registration', 'Brand', 'Colour', 'Buy Price', 'Buy Date', 'Buyer', 'Sale Price', 'Sale Date', 'Seller',\r\n              'Margin', 'Buyer Compensation', 'Seller Compensation']\r\n    dataSheet.append(header)\r\n    carsData.save(carsFilePath)\r\n    messagebox.showinfo(title='File Created', message='Excel Data File Created')\r\n\r\n\r\n# Buyer Window\r\n\r\n\r\ndef buyerwindowstart():\r\n    \"\"\"\r\nMaking the buyer window. Defined as a function so that it can be linked to a button and new instances\r\nof it can be created after it is destroyed.\r\n    \"\"\"\r\n    # Creates the window and defines settings before withdrawing the root window\r\n    buyerWindow = Toplevel(root)\r\n    buyerWindow.geometry('700x400')\r\n    buyerWindow.config(bg=windowBG)\r\n    buyerWindow.resizable(FALSE, FALSE)\r\n    buyerWindow.title('Log A Bought Car')\r\n    root.withdraw()\r\n    buyerWindow.focus()\r\n    # frame for the frames to go in\r\n    buyerFrame = Frame(buyerWindow, bg=windowBG)\r\n    # frame for the entries to go in\r\n    buyCarInfo = ttk.LabelFrame(buyerFrame, text='Car Information')\r\n    # the buyBrand Combobox takes its list from the CarBrands list at the top\r\n    buyBrand = ttk.Combobox(buyCarInfo, values=CarBrands, state='readonly')\r\n    buyBrandLabel = ttk.Label(buyCarInfo, text='Car Brand', )\r\n    buyColour = ttk.Entry(buyCarInfo)\r\n    buyColourLabel = ttk.Label(buyCarInfo, text='Car Colour')\r\n    buyBrand.grid(row=0, column=1, padx=10)\r\n    buyBrandLabel.grid(row=0, column=0, padx=10, pady=20)\r\n    buyColour.grid(row=0, column=3, padx=10)\r\n    buyColourLabel.grid(row=0, column=2, padx=10)\r\n\r\n    # every entry is paired with a label telling the user what goes where\r\n    buyReg = ttk.Entry(buyCarInfo)\r\n    buyRegLabel = ttk.Label(buyCarInfo, text='Registration')\r\n    buyReg.grid(row=1, column=1, padx=10, sticky='ew')\r\n    buyRegLabel.grid(row=1, column=0, padx=10, pady=20)\r\n\r\n    buyCarInfo.grid(row=0, column=0, padx=20, pady=20, sticky='news')\r\n    buyBuyerInfo = ttk.LabelFrame(buyerFrame, text='Buyer Information')\r\n\r\n    buyPrice = ttk.Entry(buyBuyerInfo)\r\n    buyPriceLabel = ttk.Label(buyBuyerInfo, text='Buy Price')\r\n    buyPrice.grid(row=0, column=1, padx=10, pady=20)\r\n    buyPriceLabel.grid(row=0, column=0, padx=10, pady=20)\r\n\r\n    buyDateLabel = ttk.Label(buyBuyerInfo, text='Buy Date', )\r\n    buyDateDay = ttk.Spinbox(buyBuyerInfo, width=6, from_=1, to=31)\r\n    buyDateMonth = ttk.Spinbox(buyBuyerInfo, width=5, from_=1, to=12)\r\n    buyDateYear = ttk.Spinbox(buyBuyerInfo, width=5, from_=1980, to=datetime.date.today().year)\r\n    # this uses the CurrentDate function defined above\r\n    buyDateCurrent = ttk.Button(buyBuyerInfo, text='Use Current Date',\r\n                                command=CurrentDate(day=buyDateDay, month=buyDateMonth, year=buyDateYear))\r\n    buyDateLabel.grid(row=1, column=0, padx=10, pady=10)\r\n    buyDateDay.grid(row=1, column=1, padx=5, pady=10)\r\n    buyDateMonth.grid(row=1, column=2, padx=5)\r\n    buyDateYear.grid(row=1, column=3, padx=5)\r\n    buyDateCurrent.grid(row=0, column=3)\r\n    buyBuyerInfo.grid(row=1, column=0, padx=20, pady=20, sticky='news')\r\n    # lambda makes the command run asynchronously allowing it to work within the mainloop\r\n    buyConfirm = ttk.Button(buyerFrame, text='Confirm',\r\n                            command=lambda: buyerLogData(buyReg, buyBrand, buyColour, buyPrice, buyDateDay,\r\n                                                         buyDateMonth, buyDateYear, buyerWindow))\r\n    buyConfirm.grid(row=2, column=0, sticky='ew')\r\n\r\n    buyerFrame.pack()\r\n    # the window closure protocol is replaced so when the window closes the root window reappears\r\n    buyerWindow.protocol('WM_DELETE_WINDOW', lambda: subwindowclose(buyerWindow))\r\n\r\n\r\ndef buyerLogData(reg, brand, colour, buyprice, buyday, buymonth, buyyear, window):\r\n    \"\"\"\r\nTakes all the parameters below that have been entered into the buyer window and logs them in the spreadsheet\r\n    :param reg:\r\n    :param brand:\r\n    :param colour:\r\n    :param buyprice:\r\n    :param buyday:\r\n    :param buymonth:\r\n    :param buyyear:\r\n    :param window:\r\n    \"\"\"\r\n    # opening the Excel spreadsheet\r\n    carWorkbook = openpyxl.load_workbook(carsFilePath)\r\n    dataSheet = carWorkbook.active\r\n    # combining the outputs from the date spinboxes to be in the format yyyy-mm-dd\r\n    buyDate = f'{buyyear.get()}-{buymonth.get()}-{buyday.get()}'\r\n    # assembling the data into a list to be written as one row\r\n    datalist = [reg.get().capitalize(), brand.get(), colour.get().upper(), int(buyprice.get()), buyDate, loggedInUser]\r\n    # print(f'1: {reg.get()[4]}')\r\n    # print(f'2: {len(reg.get())}')\r\n    # entry validation so that nothing is left empty\r\n    if reg.get() is not None or brand.get() is not None or colour.get() is not None or buyprice.get() is not None:\r\n        # checking the registration is valid, no custom plates though\r\n        if reg.get()[4] == ' ' and len(reg.get()) == 8:\r\n            dataSheet.append(datalist)\r\n            carWorkbook.save(carsFilePath)\r\n            messagebox.showinfo(title='Car Logged',\r\n                                message=f'Your {reg.get().capitalize()} plate {brand.get()} has been successfully logged.')\r\n\r\n            subwindowclose(window)\r\n        else:\r\n            messagebox.showerror(title='Formatting error', message='Registration entered is either '\r\n                                                                   'invalid or a custom plate.')\r\n    else:\r\n        messagebox.showerror(title='Data Not Entered', message='Not all fields have been filled.')\r\n\r\n\r\n# Seller Window\r\n\r\n\r\ndef sellerWindowStart():\r\n    \"\"\"\r\nMaking the seller window\r\n    \"\"\"\r\n    sellerWindow = Toplevel(root)\r\n    sellerWindow.geometry('580x260')\r\n    sellerWindow.config(bg=windowBG)\r\n    sellerWindow.resizable(FALSE, FALSE)\r\n    sellerWindow.title('Log A Sold Car')\r\n    root.withdraw()\r\n    sellerWindow.focus()\r\n\r\n    sellCarInfo = ttk.LabelFrame(sellerWindow, text='Seller Information')\r\n    sellRegLabel = ttk.Label(sellCarInfo, text='Registration')\r\n    sellReg = ttk.Entry(sellCarInfo)\r\n    sellPriceLabel = ttk.Label(sellCarInfo, text='Sell Price')\r\n    sellPrice = ttk.Entry(sellCarInfo)\r\n    sellDateLabel = ttk.Label(sellCarInfo, text='Sell Date')\r\n    sellDateDay = ttk.Spinbox(sellCarInfo, width=6, from_=0, to=31)\r\n    sellDateMonth = ttk.Spinbox(sellCarInfo, width=5, from_=0, to=12)\r\n    sellDateYear = ttk.Spinbox(sellCarInfo, width=5, from_=1980, to=datetime.date.today().year)\r\n    sellDateCurrent = ttk.Button(sellCarInfo, text='Use Current Date',\r\n                                 command=lambda: CurrentDate(day=sellDateDay, month=sellDateMonth, year=sellDateYear))\r\n    sellConfirm = ttk.Button(sellerWindow, text='Confirm',\r\n                             command=lambda: sellerLogData(sellReg, sellPrice, sellDateDay, sellDateMonth, sellDateYear,\r\n                                                           sellerWindow))\r\n    sellRegLabel.grid(row=0, column=0, pady=10, padx=10)\r\n    sellReg.grid(row=0, column=1, pady=10, padx=10)\r\n    sellPriceLabel.grid(row=0, column=2, pady=10, padx=10)\r\n    sellPrice.grid(row=0, column=3, pady=10, padx=10)\r\n    sellDateLabel.grid(row=1, column=0, padx=5, pady=10)\r\n    sellDateDay.grid(row=1, column=1, padx=5, pady=10)\r\n    sellDateMonth.grid(row=1, column=2, padx=5, pady=10)\r\n    sellDateYear.grid(row=1, column=3, padx=5, pady=10)\r\n    sellDateCurrent.grid(row=2, column=2, padx=5, pady=10)\r\n    sellCarInfo.grid(row=0, column=0, padx=10, pady=10)\r\n    sellConfirm.grid(row=1, column=0, padx=10, pady=10, sticky='ew')\r\n\r\n    sellerWindow.protocol('WM_DELETE_WINDOW', lambda: subwindowclose(sellerWindow))\r\n\r\n\r\n\r\ndef sellerLogData(reg, price, sellday, sellmonth, sellyear, window):\r\n    \"\"\"\r\nTakes the data from sellerWindow and logs it in the spreadsheet\r\n    :param reg:\r\n    :param price:\r\n    :param sellday:\r\n    :param sellmonth:\r\n    :param sellyear:\r\n    :param window:\r\n    \"\"\"\r\n    carWorkbook = openpyxl.load_workbook(carsFilePath)\r\n    datasheet = carWorkbook.active\r\n    sellDate = f'{sellyear.get()}-{sellmonth.get()}-{sellday.get()}'\r\n    data = [int(price.get()), sellDate, loggedInUser]\r\n    # print(data)\r\n    # Checking the registration column of the spreadsheet to see if it contains reg\r\n    for cell in datasheet['A']:\r\n        # checking if it's None or else it breaks\r\n        if cell.value is not None:\r\n            if reg.get() in cell.value:\r\n                # if reg is found, write to the spreadsheet\r\n                datasheet.cell(row=cell.row, column=7, value=data[0])\r\n                datasheet.cell(row=cell.row, column=8, value=data[1])\r\n                datasheet.cell(row=cell.row, column=9, value=data[2])\r\n                buyprice = datasheet['D' + str(cell.row)].value\r\n                margin = int(price.get()) - buyprice\r\n                # calculates the buyer and seller's compensation to be written\r\n                if margin > 0:\r\n                    buyerComp = (margin / 100) * 2\r\n                    sellerComp = (margin / 100) * 5\r\n                else:\r\n                    buyerComp = 0\r\n                    sellerComp = 0\r\n                dataSheet.cell(row=cell.row, column=10, value=margin)\r\n                dataSheet.cell(row=cell.row, column=11, value=buyerComp)\r\n                dataSheet.cell(row=cell.row, column=12, value=sellerComp)\r\n                carWorkbook.save(carsFilePath)\r\n                # notifies the user that the logging was successful\r\n                messagebox.showinfo(title='Car Logged',\r\n                                    message=f'Your {reg.get().capitalize()} plate has been successfully logged as sold for £{price.get()}.')\r\n                subwindowclose(window)\r\n    if reg.get() not in dataSheet['A']:\r\n        messagebox.showerror(title='Registration Not Found', message='The registration could not be found.')\r\n\r\n\r\n# Statistics & Settings Window\r\n\r\n\r\ndef statsWindowStart():\r\n    statsWindow = Toplevel(root)\r\n    statsWindow.geometry('600x400')\r\n    statsWindow.config(bg=windowBG)\r\n    statsWindow.resizable(FALSE, FALSE)\r\n    root.withdraw()\r\n    carWorkbook = openpyxl.load_workbook(carsFilePath)\r\n    datasheet = carWorkbook.active\r\n    lifetimeComp = 0\r\n    monthlyComp = 0\r\n\r\n    # for cell in datasheet['E']:\r\n    #     if cell.value is not None:\r\n    #         # date stored as yyyy-mm-dd\r\n    #         date=cell.value.split('-')\r\n    #         # if date[1]==datetime.date.today().month:\r\n\r\n    # Stats for a Buyer\r\n    for cell in datasheet['F']:\r\n        if cell.value is not None:\r\n            if cell.value == loggedInUser:\r\n                # print(datasheet['K' + str(cell.row)].value)\r\n                buyComp = datasheet['K' + str(cell.row)].value\r\n                if buyComp is not None:\r\n                    lifetimeComp = buyComp + lifetimeComp\r\n                    if datasheet['E' + str(cell.row)].value.split('-')[1] == datetime.date.today().month:\r\n                        monthlyComp = monthlyComp + buyComp\r\n\r\n    # Stats for a Seller\r\n    for cell in datasheet['I']:\r\n        if cell.value is not None:\r\n            if cell.value == loggedInUser:\r\n                # print(datasheet['L' + str(cell.row)])\r\n                sellComp = datasheet['L' + str(cell.row)].value\r\n                if sellComp is not None:\r\n                    lifetimeComp = lifetimeComp + sellComp\r\n                    # print(lifetimeComp)\r\n                    # totals the commission for the month\r\n                    if datasheet['E' + str(cell.row)].value.split('-')[1] == datetime.date.today().month and datasheet['E' + str(cell.row)].value.split('-')[0] == datetime.date.today().year:\r\n                        monthlyComp = monthlyComp + sellComp\r\n    # Attempted Graph Code, Non-Functional in current state\r\n    #\r\n    # statsGraphFrame=ttk.Frame(statsWindow)\r\n    # graphData1={'Month':['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],\r\n    #       'Commission':[1515,1415,715,1625,2268,1532,980,585,1519,1628,1264,1000]}\r\n    # graphdataframe1=pd.DataFrame(graphData1)\r\n    # Graph = plt.Figure(figsize=(6, 5), dpi=100)\r\n    # axes = Graph.add_subplot(111)\r\n    # lineYear1 = FigureCanvasTkAgg(Graph, statsGraphFrame)\r\n    # lineYear1.get_tk_widget().grid(row=0,column=0)\r\n    # #graphdataframe1 = graphdataframe1[['Month', 'Commission']].groupby('Month').sum()\r\n    # plt.xticks([0,1,2,3,4,5,6,7,8,9,10,11],graphData1['Month'])\r\n    # graphdataframe1.plot(kind='line', legend=True, ax=axes)\r\n    # axes.set_title('Commissions by Month')\r\n    # statsGraphFrame.grid(row=0,column=0)\r\n\r\n    statsLabelFrame = ttk.Frame(statsWindow)\r\n    lifeCompLabel = ttk.Label(statsLabelFrame, text='Lifetime Compensation:')\r\n    lifeCompValue = ttk.Label(statsLabelFrame, text=str(lifetimeComp))\r\n    monthCompLabel = ttk.Label(statsLabelFrame, text='Month\\'s Compensation:')\r\n    monthCompValue = ttk.Label(statsLabelFrame, text=str(monthlyComp))\r\n    lifeCompLabel.grid(row=0, column=0, padx=10, pady=10)\r\n    lifeCompValue.grid(row=0, column=1, padx=10, pady=10)\r\n    monthCompLabel.grid(row=1, column=0, padx=10, pady=10)\r\n    monthCompValue.grid(row=1, column=1, padx=10, pady=10)\r\n    statsLabelFrame.grid(row=1, column=0)\r\n\r\n    statsWindow.protocol('WM_DELETE_WINDOW', lambda: subwindowclose(statsWindow))\r\n\r\n\r\n# Main Window\r\n\r\n\r\nroot = Tk()\r\nroot.geometry('220x280')\r\nroot.resizable(FALSE, FALSE)\r\nroot.title('S.D.M.S')\r\nroot.withdraw()\r\nroot.config(bg=windowBG)\r\nicon = PhotoImage(file='sdmsLogo.png')\r\nroot.iconphoto(True, icon)\r\n\r\nrootFrame = ttk.Frame(root)\r\n\r\nBuyerButton = ttk.Button(rootFrame, text='Log A Bought Car', padding=10, command=buyerwindowstart)\r\nSellerButton = ttk.Button(rootFrame, text='Log A Sold Car', padding=10, command=sellerWindowStart)\r\nStatsButton = ttk.Button(rootFrame, text='View Statistics', padding=10, command=statsWindowStart)\r\nBuyerButton.grid(row=0, column=0, sticky='ew', pady=20)\r\nSellerButton.grid(row=1, column=0, sticky='ew', pady=20)\r\nStatsButton.grid(row=2, column=0, sticky='ew', pady=20)\r\n\r\nrootFrame.grid(row=0, column=0, padx=40)\r\n\r\n# Login Window\r\n\r\n\r\nloginW = Toplevel(root)\r\nloginW.geometry('520x380')\r\nloginW.config(bg=windowBG)\r\nloginW.resizable(FALSE, FALSE)\r\nloginW.title('S.D.M.S Login')\r\nloginFrame = ttk.Frame(loginW)\r\nloginFrame.pack(padx=20, pady=20)\r\n\r\nloginLabel = ttk.Label(loginFrame, text='S.D.M.S', font=('Calibri', 24))\r\nloginUserEntry = ttk.Entry(loginFrame, font=('Calibri', 16))\r\nloginUserLabel = ttk.Label(loginFrame, text='Username', font=('Calibri', 16))\r\nloginPassEntry = ttk.Entry(loginFrame, show='*', font=('Calibri', 16))\r\nloginPassLabel = ttk.Label(loginFrame, text='Password', font=('Calibri', 16))\r\nloginButton = ttk.Button(loginFrame, text='Login',\r\n                         command=lambda: login(username=loginUserEntry, password=loginPassEntry))\r\n\r\nloginLabel.grid(row=0, column=0, columnspan=2, pady=30)\r\nloginUserLabel.grid(row=1, column=0, padx=10)\r\nloginUserEntry.grid(row=1, column=1, pady=5)\r\nloginPassLabel.grid(row=2, column=0, padx=10)\r\nloginPassEntry.grid(row=2, column=1, pady=5)\r\nloginButton.grid(row=3, column=0, columnspan=2, pady=20)\r\n\r\nloginW.protocol('WM_DELETE_WINDOW', lambda: root.destroy())\r\n# binds the enter key to the login button for convenience\r\nloginW.bind('<Return>', lambda event=None: loginButton.invoke())\r\n\r\nsv_ttk.use_dark_theme()\r\nroot.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.py b/Main.py
--- a/Main.py	(revision 3cdce915a18c1c0f59885b92b57f5f665bfa351f)
+++ b/Main.py	(date 1694636813293)
@@ -242,7 +242,6 @@
     sellerWindow.protocol('WM_DELETE_WINDOW', lambda: subwindowclose(sellerWindow))
 
 
-
 def sellerLogData(reg, price, sellday, sellmonth, sellyear, window):
     """
 Takes the data from sellerWindow and logs it in the spreadsheet
@@ -316,7 +315,8 @@
                 buyComp = datasheet['K' + str(cell.row)].value
                 if buyComp is not None:
                     lifetimeComp = buyComp + lifetimeComp
-                    if datasheet['E' + str(cell.row)].value.split('-')[1] == datetime.date.today().month:
+                    if datasheet['E' + str(cell.row)].value.split('-')[1] == datetime.date.today().month and \
+                            datasheet['E' + str(cell.row)].value.split('-')[0] == datetime.date.today().year:
                         monthlyComp = monthlyComp + buyComp
 
     # Stats for a Seller
@@ -329,7 +329,8 @@
                     lifetimeComp = lifetimeComp + sellComp
                     # print(lifetimeComp)
                     # totals the commission for the month
-                    if datasheet['E' + str(cell.row)].value.split('-')[1] == datetime.date.today().month and datasheet['E' + str(cell.row)].value.split('-')[0] == datetime.date.today().year:
+                    if datasheet['E' + str(cell.row)].value.split('-')[1] == datetime.date.today().month and \
+                            datasheet['E' + str(cell.row)].value.split('-')[0] == datetime.date.today().year:
                         monthlyComp = monthlyComp + sellComp
     # Attempted Graph Code, Non-Functional in current state
     #
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># SDMS\r\nSimple Dealer Management System\r\n\r\nThis was created to attempt to be an intuitive approach
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 3cdce915a18c1c0f59885b92b57f5f665bfa351f)
+++ b/README.md	(date 1694641483939)
@@ -1,4 +1,5 @@
 # SDMS
 Simple Dealer Management System
 
-This was created to attempt to be an intuitive approach
\ No newline at end of file
+This was created to attempt to be an intuitive approach
+Repository can be found at https://github.com/ElapidaeRae/SDMS/
\ No newline at end of file
Index: .idea/pythonProject1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/pythonProject1.iml b/.idea/pythonProject1.iml
--- a/.idea/pythonProject1.iml	(revision 3cdce915a18c1c0f59885b92b57f5f665bfa351f)
+++ b/.idea/pythonProject1.iml	(date 1694641527777)
@@ -1,7 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
